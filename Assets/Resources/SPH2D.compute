#pragma kernel DensityCS
#pragma kernel PressureCS
#pragma kernel ForceCS
#pragma kernel IntegrateCS


#define THREAD_SIZE_X 1024


struct Particle {
	float2 position;
	float2 velocity;
};

struct ParticlePressure {
	float pressure;
};

struct ParticleForces {
	float2 acceleration;
};

struct ParticleDensity {
	float density;
};

struct ColorField {
	float colorField;
	float colorLaplacian;
	float2 colorGradient;
};


StructuredBuffer  <Particle>        _ParticlesBufferRead;
RWStructuredBuffer<Particle>        _ParticlesBufferWrite;


StructuredBuffer  <ParticleDensity> _ParticlesDensityBufferRead;
RWStructuredBuffer<ParticleDensity> _ParticlesDensityBufferWrite;


StructuredBuffer<ParticlePressure> _ParticlesPressureBufferRead;
RWStructuredBuffer<ParticlePressure> _ParticlesPressureBufferWrite;


StructuredBuffer  <ParticleForces>  _ParticlesForceBufferRead;
RWStructuredBuffer<ParticleForces>  _ParticlesForceBufferWrite;



cbuffer CB {
	int   _NumParticles;		
	float _TimeStep;			
	float _Smoothlen;			
	float _PressureStiffness;	
	float _RestDensity;			
	float _DensityCoef;			
	float _GradPressureCoef;	
	float _LapViscosityCoef;	
	float _WallStiffness;		
	float _Viscosity;			
	float2 _Gravity;			
	float2 _Range;				
	float _tensionThreshold;	
	float _tensionCoefficient;	
	float _GradTensionCoef;		
	float _LapTensionCoef;		

	float3 _MousePos;			
	float _MouseRadius;			
	bool _MouseDown;			
};










inline float CalculateDensity(float r_sq) {
	const float h_sq = _Smoothlen * _Smoothlen;
	return _DensityCoef * (h_sq - r_sq) * (h_sq - r_sq) * (h_sq - r_sq);
}




inline float CalculatePressure(float density) {
	return _PressureStiffness * max(pow(abs(density / _RestDensity), 7) - 1, 0);
}




inline float2 CalculateGradPressure(float r, float P_pressure, float N_pressure, float N_density, float2 diff) {
	const float h = _Smoothlen;
	float avg_pressure = 0.5f * (N_pressure + P_pressure);
	return _GradPressureCoef * avg_pressure / N_density * (h - r) * (h - r) / r * (diff);
}




inline float2 CalculateLapVelocity(float r, float2 P_velocity, float2 N_velocity, float N_density) {
	const float h = _Smoothlen;
	float2 vel_diff = (N_velocity - P_velocity);
	return _LapViscosityCoef / N_density * (h - r) * vel_diff;
}

inline ColorField CalculateSurfaceTension(float r_sq , float N_density, float2 diff)
{
	
	
	
	ColorField color;
	float colorField = 0.0f;
	float2 colorGradient = float2(0,0);
	float colorLaplacian = 0.0f;
	float tensionCoefficient = 0.0728f;
	const float h = _Smoothlen;
	const float h_sq = _Smoothlen * _Smoothlen;
	

	
	colorGradient=_GradTensionCoef*diff * (h_sq - r_sq) *(h_sq - r_sq) /N_density;
  
	


	colorLaplacian=_LapTensionCoef * (h_sq - r_sq) *(3 *(pow(h ,3))-7*r_sq)/N_density;

	



	float sqrMagnitude=colorGradient.x*colorGradient.x+colorGradient.y*colorGradient.y;
	if (sqrMagnitude < _tensionThreshold * _tensionThreshold)
	{
		
		return color;
	}

	color.colorField=colorField;
	color.colorLaplacian=colorLaplacian;
	color.colorGradient=colorGradient;
	

	return color;
}









[numthreads(THREAD_SIZE_X, 1, 1)]
void DensityCS(uint3 DTid : SV_DispatchThreadID) {
	uint P_ID = DTid.x;	

	float h_sq = _Smoothlen * _Smoothlen;
	float2 P_position = _ParticlesBufferRead[P_ID].position;

	
	float density = 0;
	for (uint N_ID = 0; N_ID < (uint)_NumParticles; N_ID++) {
		if (N_ID == P_ID) continue;	

		float2 N_position = _ParticlesBufferRead[N_ID].position;

		float2 diff = N_position - P_position;	
		float r_sq = dot(diff, diff);			

		
		if (r_sq < h_sq) {
			density += CalculateDensity(r_sq);	
		}
	}

	
	_ParticlesDensityBufferWrite[P_ID].density = density;
}





[numthreads(THREAD_SIZE_X, 1, 1)]
void PressureCS(uint3 DTid : SV_DispatchThreadID) {
	uint P_ID = DTid.x;	

	float  P_density = _ParticlesDensityBufferRead[P_ID].density;	
	float  P_pressure = CalculatePressure(P_density);	

	
	_ParticlesPressureBufferWrite[P_ID].pressure = P_pressure;
}





[numthreads(THREAD_SIZE_X, 1, 1)]
void ForceCS(uint3 DTid : SV_DispatchThreadID) {
	uint P_ID = DTid.x; 

	float2 P_position = _ParticlesBufferRead[P_ID].position;
	float2 P_velocity = _ParticlesBufferRead[P_ID].velocity;
	float  P_density = _ParticlesDensityBufferRead[P_ID].density;		
	float  P_pressure = _ParticlesPressureBufferRead[P_ID].pressure;	

	const float h_sq = _Smoothlen * _Smoothlen;
	ColorField temp;	
	ColorField color;
	
	float2 press = float2(0, 0);
	float2 visco = float2(0, 0);
	for (uint N_ID = 0; N_ID < (uint)_NumParticles; N_ID++) {
		if (N_ID == P_ID) continue;	

		float2 N_position = _ParticlesBufferRead[N_ID].position;

		float2 diff = N_position - P_position;
		float r_sq = dot(diff, diff);

		
		if (r_sq < h_sq) {	
			float  N_density = _ParticlesDensityBufferRead[N_ID].density;
			float  N_pressure = _ParticlesPressureBufferRead[N_ID].pressure;
			float2 N_velocity = _ParticlesBufferRead[N_ID].velocity;
			float  r = sqrt(r_sq);

			
			press += CalculateGradPressure(r, P_pressure, N_pressure, N_density, diff);

			
			visco += CalculateLapVelocity(r, P_velocity, N_velocity, N_density);

			temp=CalculateSurfaceTension(r_sq,N_density,diff);
			color.colorGradient+=temp.colorGradient;
			color.colorLaplacian+=temp.colorLaplacian;

		}
	}

	float2 colorGradient=color.colorGradient;
	float madntiude=sqrt(colorGradient.x*colorGradient.x + colorGradient.y*colorGradient.y );
	float2 tension=-_tensionCoefficient*color.colorLaplacian*color.colorGradient/madntiude;
	

	
	float2 force = press + _Viscosity * visco + tension;

	
	_ParticlesForceBufferWrite[P_ID].acceleration = force / P_density;
}





[numthreads(THREAD_SIZE_X, 1, 1)]
void IntegrateCS(uint3 DTid : SV_DispatchThreadID) {
	const unsigned int P_ID = DTid.x; 

	
	float2 position = _ParticlesBufferRead[P_ID].position;
	float2 velocity = _ParticlesBufferRead[P_ID].velocity;
	float2 acceleration = _ParticlesForceBufferRead[P_ID].acceleration;	

	
	if (distance(position, _MousePos.xy) < _MouseRadius && _MouseDown) {
		float2 dir = position - _MousePos.xy;
		float pushBack = _MouseRadius-length(dir);
		acceleration += 100 * pushBack * normalize(dir);
	}
    
	

	
	float dist;
	dist = dot(float3(position, 1), float3(1, 0, 0));
	acceleration += min(dist, 0) * -_WallStiffness * float2(1, 0);

	dist = dot(float3(position, 1), float3(0, 1, 0));
	acceleration += min(dist, 0) * -_WallStiffness * float2(0, 1);

	dist = dot(float3(position, 1), float3(-1, 0, _Range.x));
	acceleration += min(dist, 0) * -_WallStiffness * float2(-1, 0);

	dist = dot(float3(position, 1), float3(0, -1, _Range.y));
	acceleration += min(dist, 0) * -_WallStiffness * float2(0, -1);

	
	acceleration += _Gravity;

	
	velocity += _TimeStep * acceleration;
	position += _TimeStep * velocity;

	
	_ParticlesBufferWrite[P_ID].position = position;
	_ParticlesBufferWrite[P_ID].velocity = velocity;
}